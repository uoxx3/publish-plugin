/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details on writing Custom Plugins, please refer to https://docs.gradle.org/8.10.1/userguide/custom_plugins.html in the Gradle documentation.
 */

plugins {
	// Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
	`java-gradle-plugin`
	`maven-publish`
	id("com.gradle.plugin-publish") version "1.3.0"
}

/* -------------------------------------------------------------------
 * Base configuration
 * ------------------------------------------------------------------- */

group = "io.github.uoxx3"
version = "1.0"

val pluginName get() = "publishing"
val pluginId get() = "$group.$pluginName"

/* -------------------------------------------------------------------
 * Java configuration
 * ------------------------------------------------------------------- */

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = sourceCompatibility
}

/* -------------------------------------------------------------------
 * Plugin configuration
 * ------------------------------------------------------------------- */

@Suppress("UnstableApiUsage")
gradlePlugin {
	// #############################
	// Plugin information
	// #############################

	website.set("https://github.com/uoxx3/publish-plugin")
	vcsUrl.set("https://github.com/uoxx3/publish-plugin.git")

	// #############################
	// Plugin entry definition
	// #############################

	val publishing by plugins.creating {
		id = pluginId
		implementationClass = "uoxx3.gradle.publish.PublishPlugin"
		version = project.version as String
		displayName = "Gradle publishing congigurator"
		description = "Set up Maven and Ivy type projects to publish without dying."
		tags.set(listOf("java", "maven", "ivy", "configuration"))
	}
}

/* -------------------------------------------------------------------
 * Publication config
 * ------------------------------------------------------------------- */

val pluginWord get() = "plugin"
val pluginWordLen get() = pluginWord.length

afterEvaluate {
	publishing {
		publications {
			// #############################
			// Gradle maven publication
			// #############################
			withType<MavenPublication> {
				// Ignore special names
				if (!artifactId.endsWith("plugin") ||
					artifactId.contains("gradle")
				) return@withType

				// Clean artifact name
				val artifactLength = (artifactId.length - pluginWordLen)
				val basename = artifactId.substring(0 until artifactLength)

				// Replace the artifact name without problematic names
				artifactId = if (basename.isBlank()) {
					pluginName
				} else {
					"$basename.$pluginName"
				}
			}
		}
	}
}

/* -------------------------------------------------------------------
 * Testing configuration
 * ------------------------------------------------------------------- */

// Add a source set for the functional test suite
val functionalTestSourceSet = sourceSets.create("functionalTest") {
}

configurations["functionalTestImplementation"].extendsFrom(configurations["testImplementation"])
configurations["functionalTestRuntimeOnly"].extendsFrom(configurations["testRuntimeOnly"])

// Add a task to run the functional tests
val functionalTest by tasks.registering(Test::class) {
	testClassesDirs = functionalTestSourceSet.output.classesDirs
	classpath = functionalTestSourceSet.runtimeClasspath
	useJUnitPlatform()
}

gradlePlugin.testSourceSets.add(functionalTestSourceSet)

/* -------------------------------------------------------------------
 * Tasks configuration
 * ------------------------------------------------------------------- */

tasks.named<Task>("check") {
	// Run the functional tests as part of `check`
	dependsOn(functionalTest)
}

tasks.named<Test>("test") {
	// Use JUnit Jupiter for unit tests.
	useJUnitPlatform()
}

/* -------------------------------------------------------------------
 * Dependency configuration
 * ------------------------------------------------------------------- */

dependencies {
	implementation(libs.google.gson)
	implementation(libs.uoxx3.environment)
	compileOnly(libs.jetbrains.annotations)

	testImplementation(libs.junit.jupiter)
	testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}