/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import org.gradle.testkit.runner.BuildResult;
import org.gradle.testkit.runner.GradleRunner;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;

/**
 * A simple functional test for the 'org.example.greeting' plugin.
 */
class PublishPluginPluginFunctionalTest {
	@TempDir
	File projectDir;

	private File getBuildFile() {
		return new File(projectDir, "build.gradle");
	}

	private File getSettingsFile() {
		return new File(projectDir, "settings.gradle");
	}

	@Test
	void mavenProjectTest() throws Exception {
		moveResources();
		// Settings file
		writeString(getSettingsFile(),
			"""
				rootProject.name = "project-example"
				""");
		// Gradle build file
		writeString(getBuildFile(),
			"""
				plugins{
					id('io.github.uoxx3.publishing')
				}
				""");

		// Run the build
		GradleRunner runner = GradleRunner.create();
		runner.forwardOutput();
		runner.withPluginClasspath();
		runner.withArguments("publishToMavenLocal", "--stacktrace");
		runner.withProjectDir(projectDir);
		BuildResult result = runner.build();

		// Verify the result
		Assertions.assertFalse(result.getOutput().contains("Exception"));
	}

	private void writeString(File file, String string) throws IOException {
		try (Writer writer = new FileWriter(file)) {
			writer.write(string);
		}
	}

	private void moveResources() throws IOException, URISyntaxException {
		ClassLoader loader = ClassLoader.getSystemClassLoader();
		String[] resources = {"project.json", "project.developers.json", "credentials.env"};

		for (String item : resources) {
			URL resource = loader.getResource(item);
			Assertions.assertNotNull(resource,
				"The resource %s cannot be <null>".formatted(item));

			Path toPath = Path.of(resource.toURI());
			Path destination = projectDir.toPath()
				.resolve(toPath.getFileName());
			Files.copy(toPath, destination,
				StandardCopyOption.REPLACE_EXISTING);
		}
	}

}
